shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
setwd("C:/Users/bmped/OneDrive/Documents/Postdoc/CEM_shiny app (Alberta trout)/Interaction_matrix")
library(plotly)
library(plot3D)
library(data.table)
# read it as a matrix
df <- read.csv('matrix.csv', header = F)#[,-1]
# create a list of elements to use it as column and row names in the matrix
# Var$ can be typed with the name of any variable, e.g., "temperature" & "sun_light"
Var1 <- as.list(df[1,2:ncol(df)]) # a list that excludes the first column
Var2 <- as.list(df[2:nrow(df),1]) # a list that excludes the first row
# read it as a matrix starting from the second element on
# rows and columns
m <- as.matrix(df[2:nrow(df),2:ncol(df)])
m
# Change the matrixÂ´s column & row names using the variable's values
colnames(m) <- Var1
row.names(m) <- Var2
# read the matrix as a dataframe
mtable <- as.data.frame(as.table(m))
colnames(mtable)[3] <- "SC" # "SC" stands for system capacity
# change columns to numeric
# mtable$Var1 <- as.numeric(mtable$Var1)
# mtable$Var2 <- as.numeric(mtable$Var2)
mtable
#extract value based on a condition, e.g., get value when
# e.g., Var 1 == 0.6 & Var 2 == 8, output == 0.75
# The output "SC" object will be used in the JoeModel as a ind. variable
SC <- mtable[mtable$Var1 == readline(prompt = "What is the value of Var1?") &
mtable$Var2 == readline(prompt = "What is the value of Var2?"),
'SC']
dd <- mtable
getval <- function(c1, c2, data=dd){
cap <- data$SC[data$Var1 == c1 & data$Var2 == c2]
return(cap)
}
getval(0.6, 27)
plot_ly(z = m) %>% add_surface(colorscale ='Viridis')
# change columns to numeric
# mtable$Var1 <- as.numeric(mtable$Var1)
# mtable$Var2 <- as.numeric(mtable$Var2)
mtable
m
# plot using (plotly)
axx <- list(
nticks = 10,
range = c(0.1,1)
)
axy <- list(
nticks = 10,
range = c(0,27)
)
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly(z = m) %>% add_surface(colorscale ='Viridis') %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
m
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d" )
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d",
colorscale ='Viridis')
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d") %>%
add_surface(colorscale ='Viridis')
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d",
color = 'Viridis')
colors = colorRamp('Viridis')
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d",
colors = colorRampPalette(brewer.pal(10,"Spectral"))(41)))
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC, type="mesh3d",
colors = colorRampPalette(brewer.pal(10,"Spectral"))(41))
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = colorRamp('Viridis'),
type="mesh3d")
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = list(c(0,'red'),
c(0.33,'orange'),
c(0.66, 'yellow'),
c(1, 'green')),
type="mesh3d")
plot_ly(z = m) %>% add_surface(colorscale ='Viridis')
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = list(c(0,'purple'),
c(0.33,'blue'),
c(0.66, 'green'),
c(1, 'yellow')),
type="mesh3d")
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = list(c(0,'darkblue'),
c(0.33,'blue'),
c(0.66, 'green'),
c(1, 'yellow')),
type="mesh3d")
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d")
runApp('selection_matrix')
runApp('selection_matrix')
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
runApp('selection_matrix')
axz <- list(
nticks = 10,
range = c(0,1)
)
# plot using (plotly)
# add ticks
axx <- list(
nticks = 10,
range = c(0.1,1)
)
axy <- list(
nticks = 9,
range = c(0,27,3)
)
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
# plot using (plotly)
# add ticks
axx <- list(
nticks = 10,
range = c(0.1,1)
)
axy <- list(
nticks = 10,
range = c(0,27,3)
)
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
runApp('selection_matrix')
# plot using (plotly)
# add ticks
axx <- list(
nticks = 10,
range = c(0.1,1)
)
axy <- list(
nticks = 10,
range = c(0,30)
)
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
# plot using (plotly)
# add ticks
axx <- list(
nticks = 10,
range = c(0.1,1)
)
axy <- list(
nticks = 7,
range = c(0,27)
)
axz <- list(
nticks = 10,
range = c(0,1)
)
plot_ly() %>%
add_trace(data = mtable,
x=mtable$Var1,
y=mtable$Var2,
z=mtable$SC,
intensity=mtable$SC,
colorscale = 'Viridis',
type="mesh3d") %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz))
runApp('selection_matrix')
shiny::runApp()
shiny::runApp()
runApp()
